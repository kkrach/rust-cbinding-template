/* automatically generated by rust-bindgen 0.59.1 */

extern "C" {
    pub fn foo_reset();
}
extern "C" {
    pub fn foo_get_value() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foo_set_value(value: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bar {
    pub first: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_char,
    pub third: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bar() {
    assert_eq!(
        ::std::mem::size_of::<bar>(),
        16usize,
        concat!("Size of: ", stringify!(bar))
    );
    assert_eq!(
        ::std::mem::align_of::<bar>(),
        8usize,
        concat!("Alignment of ", stringify!(bar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bar>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bar),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bar>())).second as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bar),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bar>())).third as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bar),
            "::",
            stringify!(third)
        )
    );
}
extern "C" {
    pub fn foo_get_bar() -> *const bar;
}
extern "C" {
    pub fn foo_set_bar(value: *mut bar);
}
pub const zoo_ZOO_A: zoo = 7;
pub const zoo_ZOO_B: zoo = 8;
pub const zoo_ZOO_C: zoo = 9;
pub const zoo_ZOO_D: zoo = 10;
pub type zoo = ::std::os::raw::c_uint;
extern "C" {
    pub fn foo_get_zoo() -> zoo;
}
extern "C" {
    pub fn foo_set_zoo(value: zoo);
}
